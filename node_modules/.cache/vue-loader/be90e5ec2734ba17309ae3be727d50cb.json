{"remainingRequest":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\src\\components\\TestCardSwipes.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\src\\components\\TestCardSwipes.vue","mtime":1590362755078},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKdGFibGUudi10YWJsZSB7CiAgbWF4LXdpZHRoOiBub25lOwp9Cg=="},{"version":3,"sources":["TestCardSwipes.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkQA;AACA;AACA","file":"TestCardSwipes.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <v-row dense style=\"margin: 10px 10px -10px 10px;\">\n      <v-col cols=\"12\" sm=\"12\" md=\"2\" al>\n        <div class=\"text-left\">\n          <v-toolbar-title>Scan People in</v-toolbar-title>\n        </div>\n      </v-col>\n      <v-col cols=\"2\" />\n      <v-col cols=\"12\" sm=\"12\" md=\"4\">\n        <v-text-field\n          outlined\n          dense\n          v-model=\"search\"\n          append-icon=\"mdi-magnify\"\n          :label=\"$t('dataTable.SEARCH')\"\n          id=\"search\"\n          single-line\n          hide-details\n          clearable\n          clear-icon=\"mdi-close\"\n        />\n      </v-col>\n      <v-col cols=\"12\" sm=\"12\" md=\"3\">\n        <v-combobox\n          outlined\n          dense\n          v-model=\"fieldsToSearch\"\n          :items=\"searchFields\"\n          label=\"Fields\"\n          multiple\n        />\n      </v-col>\n    </v-row>\n  </div>\n</template>\n\n<script>\nimport { mapActions } from 'vuex'\nimport { getFormat, buildPayloadPagination } from '@/utils/utils.js'\n\nexport default {\n  metaInfo() {\n    return {\n      title: this.$store.getters.appTitle,\n      titleTemplate: `${this.$t('cities.TITLE')} - %s`\n    }\n  },\n  data() {\n    return {\n      dataTableLoading: true,\n      delayTimer: null,\n      dialog: false,\n      search: '',\n      pagination: {},\n      editedItem: {},\n      defaultItem: {},\n      fieldsToSearch: ['name']\n    }\n  },\n  created() {\n    let buffer = []\n    /* eslint-disable */\n    document.addEventListener('keydown', (event) => {\n      // const charList = 'abcdefghijklmnopqrstuvwxyz0123456789';\n      const key = event.key.toLowerCase()\n      console.log(this)\n      // // we are only interested in alphanumeric keys\n      // if (charList.indexOf(key) === -1) return;\n\n      buffer.push(key)\n      // console.log(buffer);\n      let minusIndex = -1\n      let periodIndex = -1\n      if (key === 'enter') {\n        for (let i = 0; i < buffer.length; i++) {\n          if (buffer[i] === '-') {\n            minusIndex = i\n          }\n          if (buffer[i] === '.') {\n            periodIndex = i\n          }\n        }\n        if (minusIndex === -1 && periodIndex === -1) {\n          buffer = []\n        } else {\n          let str = ''\n          for (let i = minusIndex; i < buffer.length - 1; i++) {\n            if (buffer[i] !== 'shift') {\n              str += buffer[i]\n            }\n          }\n          console.log(str)\n        }\n      }\n    })\n  },\n  computed: {\n    formTitle() {\n      return this.editedItem._id\n        ? this.$t('dataTable.EDIT_ITEM')\n        : this.$t('dataTable.NEW_ITEM')\n    },\n    headers() {\n      return [\n        {\n          text: this.$i18n.t('dataTable.ACTIONS'),\n          value: '_id',\n          sortable: false,\n          width: 100\n        },\n        {\n          text: this.$i18n.t('cities.headers.NAME'),\n          align: 'left',\n          sortable: true,\n          value: 'name'\n        },\n        {\n          text: this.$i18n.t('common.CREATED'),\n          align: 'left',\n          sortable: true,\n          value: 'createdAt'\n        },\n        {\n          text: this.$i18n.t('common.UPDATED'),\n          align: 'left',\n          sortable: true,\n          value: 'updatedAt'\n        }\n      ]\n    },\n    items() {\n      return this.$store.state.adminCities.cities\n    },\n    totalItems() {\n      return this.$store.state.adminCities.totalCities\n    }\n  },\n  watch: {\n    dialog(value) {\n      return value ? true : this.close()\n    },\n    pagination: {\n      async handler() {\n        try {\n          this.dataTableLoading = true\n          await this.getCities(\n            buildPayloadPagination(this.pagination, this.buildSearch())\n          )\n          this.dataTableLoading = false\n          // eslint-disable-next-line no-unused-vars\n        } catch (error) {\n          this.dataTableLoading = false\n        }\n      },\n      deep: true\n    },\n    async search() {\n      clearTimeout(this.delayTimer)\n      this.delayTimer = setTimeout(() => {\n        this.doSearch()\n      }, 400)\n    }\n  },\n  methods: {\n    ...mapActions(['getCities', 'editCity', 'saveCity', 'deleteCity']),\n    getFormat(date) {\n      window.__localeId__ = this.$store.getters.locale\n      return getFormat(date, 'iii, MMMM d yyyy, h:mm a')\n    },\n    async doSearch() {\n      try {\n        this.dataTableLoading = true\n        await this.getCities(\n          buildPayloadPagination(this.pagination, this.buildSearch())\n        )\n        this.dataTableLoading = false\n        // eslint-disable-next-line no-unused-vars\n      } catch (error) {\n        this.dataTableLoading = false\n      }\n    },\n    buildSearch() {\n      return this.search\n        ? { query: this.search, fields: this.fieldsToSearch.join(',') }\n        : {}\n    },\n    editItem(item) {\n      this.editedItem = Object.assign({}, item)\n      this.dialog = true\n    },\n    testLog(str){\n      console.log(str)\n    },\n    async deleteItem(item) {\n      try {\n        const response = await this.$confirm(\n          this.$t('common.DO_YOU_REALLY_WANT_TO_DELETE_THIS_ITEM'),\n          {\n            title: this.$t('common.WARNING'),\n            buttonTrueText: this.$t('common.DELETE'),\n            buttonFalseText: this.$t('common.CANCEL'),\n            buttonTrueColor: 'red lighten3',\n            buttonFalseColor: 'green'\n          }\n        )\n        if (response) {\n          this.dataTableLoading = true\n          await this.deleteCity(item._id)\n          await this.getCities(\n            buildPayloadPagination(this.pagination, this.buildSearch())\n          )\n          this.dataTableLoading = false\n        }\n        // eslint-disable-next-line no-unused-vars\n      } catch (error) {\n        this.dataTableLoading = false\n      }\n    },\n    close() {\n      this.dialog = false\n      setTimeout(() => {\n        this.editedItem = Object.assign({}, this.defaultItem)\n      }, 300)\n    },\n    async save() {\n      const isValid = await this.$refs.observer.validate()\n      if (isValid) {\n        try {\n          this.dataTableLoading = true\n          // Updating item\n          if (this.editedItem._id) {\n            await this.editCity(this.editedItem)\n            await this.getCities(\n              buildPayloadPagination(this.pagination, this.buildSearch())\n            )\n            this.dataTableLoading = false\n          } else {\n            // Creating new item\n            await this.saveCity({ name: this.editedItem.name })\n            await this.getCities(\n              buildPayloadPagination(this.pagination, this.buildSearch())\n            )\n            this.dataTableLoading = false\n          }\n          this.close()\n          // eslint-disable-next-line no-unused-vars\n        } catch (error) {\n          this.dataTableLoading = false\n          this.close()\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style>\ntable.v-table {\n  max-width: none;\n}\n</style>\n"]}]}