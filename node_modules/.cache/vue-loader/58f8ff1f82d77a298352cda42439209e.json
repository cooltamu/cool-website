{"remainingRequest":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\src\\components\\CoolLanding.vue?vue&type=template&id=08fbbdf2&","dependencies":[{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\src\\components\\CoolLanding.vue","mtime":1589945728078},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPG5hdgogICAgY2xhc3M9Im5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1kYXJrIGZ0Y29fbmF2YmFyIGJnLWRhcmsgZnRjby1uYXZiYXItbGlnaHQiCiAgICBpZD0iZnRjby1uYXZiYXIiCiAgPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGEgY2xhc3M9Im5hdmJhci1icmFuZCIgaHJlZj0iIyI+CiAgICAgICAgPGltZwogICAgICAgICAgaWQ9IkNvb2xMYW5kaW5nTG9nbyIKICAgICAgICAgIHNyYz0iaW1hZ2VzL2xvZ28ucG5nIgogICAgICAgICAgd2lkdGg9IjIwMCIKICAgICAgICAgIGhlaWdodD0iNTAiCiAgICAgICAgICBhbHQ9IiIKICAgICAgICAvPgogICAgICA8L2E+CiAgICAgIDxidXR0b24KICAgICAgICBjbGFzcz0ibmF2YmFyLXRvZ2dsZXIiCiAgICAgICAgdHlwZT0iYnV0dG9uIgogICAgICAgIGRhdGEtdG9nZ2xlPSJjb2xsYXBzZSIKICAgICAgICBkYXRhLXRhcmdldD0iI2Z0Y28tbmF2IgogICAgICAgIGFyaWEtY29udHJvbHM9ImZ0Y28tbmF2IgogICAgICAgIGFyaWEtZXhwYW5kZWQ9ImZhbHNlIgogICAgICAgIGFyaWEtbGFiZWw9IlRvZ2dsZSBuYXZpZ2F0aW9uIgogICAgICA+CiAgICAgICAgPHNwYW4gY2xhc3M9Im9pIG9pLW1lbnUiPjwvc3Bhbj4gTWVudQogICAgICA8L2J1dHRvbj4KCiAgICAgIDxkaXYgY2xhc3M9ImNvbGxhcHNlIG5hdmJhci1jb2xsYXBzZSIgaWQ9ImZ0Y28tbmF2Ij4KICAgICAgICA8dWwgY2xhc3M9Im5hdmJhci1uYXYgbWwtYXV0byI+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj48YSBocmVmPSIjaG9tZSIgY2xhc3M9Im5hdi1saW5rIj5Ib21lPC9hPjwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iI3ZvbHVudGVlciIgY2xhc3M9Im5hdi1saW5rIj5Wb2x1bnRlZXI8L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9IiNtaXNzaW9uIiBjbGFzcz0ibmF2LWxpbmsiPk1pc3Npb248L2E+CiAgICAgICAgICA8L2xpPgogICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9IiNzbmFwc2hvdCIgY2xhc3M9Im5hdi1saW5rIj5TbmFwc2hvdDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iI3RlYW0iIGNsYXNzPSJuYXYtbGluayI+VGVhbTwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgPGEgaHJlZj0iI2Zvb3RlckNvbnRhY3QiIGNsYXNzPSJuYXYtbGluayI+Q29udGFjdDwvYT4KICAgICAgICAgIDwvbGk+CiAgICAgICAgPC91bD4KICAgICAgICA8cm91dGVyLWxpbmsgOnRvPSJ7IG5hbWU6ICdob21lJyB9Ij4KICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ0biBidG4tcHJpbWFyeSBuYXZiYXItYnRuIj5EYXNoYm9hcmQ8L2J1dHRvbj4KICAgICAgICA8L3JvdXRlci1saW5rPgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvbmF2PgogIDwhLS0gRU5EIG5hdiAtLT4KCiAgPGRpdgogICAgY2xhc3M9Imhlcm8td3JhcCIKICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJ2ltYWdlcy9iZ18xLmpwZycpOyIKICAgIGRhdGEtc3RlbGxhci1iYWNrZ3JvdW5kLXJhdGlvPSIwLjUiCiAgPgogICAgPGRpdiBjbGFzcz0ib3ZlcmxheSI+PC9kaXY+CiAgICA8ZGl2IGlkPSJob21lIiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgPGRpdgogICAgICAgIGNsYXNzPSJyb3cgbm8tZ3V0dGVycyBzbGlkZXItdGV4dCBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWVuZCIKICAgICAgICBkYXRhLXNjcm9sbGF4LXBhcmVudD0idHJ1ZSIKICAgICAgPgogICAgICAgIDxkaXYKICAgICAgICAgIGNsYXNzPSJjb2wtbWQtNiBvcmRlci1tZC1sYXN0IGZ0Y28tYW5pbWF0ZSBtdC01IgogICAgICAgICAgZGF0YS1zY3JvbGxheD0iIHByb3BlcnRpZXM6IHsgdHJhbnNsYXRlWTogJzcwJScgfSIKICAgICAgICA+CiAgICAgICAgICA8aDEKICAgICAgICAgICAgY2xhc3M9Im1iLTQiCiAgICAgICAgICAgIGRhdGEtc2Nyb2xsYXg9InByb3BlcnRpZXM6IHsgdHJhbnNsYXRlWTogJzMwJScsIG9wYWNpdHk6IDEuNiB9IgogICAgICAgICAgPgogICAgICAgICAgICBJbXBhY3QgRnV0dXJlIEdlbmVyYXRpb25zCiAgICAgICAgICA8L2gxPgogICAgICAgICAgPHA+CiAgICAgICAgICAgIDxhIGhyZWY9IiN2b2x1bnRlZXIiIGNsYXNzPSJidG4gYnRuLWJsYWNrIHB5LTMgcHgtNCIKICAgICAgICAgICAgICA+SG93IENhbiBJIEhlbHA8L2EKICAgICAgICAgICAgPgogICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGQtbm9uZSBkLW1kLWJsb2NrIj4KICAgICAgICAgIDxkaXYgY2xhc3M9InBsYXktdmlkZW8gcGItNSBkLWZsZXggYWxpZ24taXRlbXMtY2VudGVyIj4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly92aW1lby5jb20vNDU4MzAxOTQiIGNsYXNzPSJwb3B1cC12aW1lbyIKICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iaWNvbiI+PGkgY2xhc3M9Imlvbi1pb3MtcGxheSI+PC9pPjwvc3Bhbj4KICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwbGF5Ij5QbGF5IHZpZGVvPC9zcGFuPjwvYQogICAgICAgICAgICAgID4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDxkaXYgaWQ9ImFwcCI+PC9kaXY+CgogIDxzZWN0aW9uIGNsYXNzPSJmdGNvLXNlY3Rpb24gZnRjby1uby1wdCBmdGNvLW5vLXBiIGZ0Y28tdm9sdW50ZWVyIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdgogICAgICAgICAgaWQ9InZvbHVudGVlciIKICAgICAgICAgIGNsYXNzPSJjb2wtbWQtNyBpbWctdm9sdW50ZWVyIgogICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvYWJvdXQuanBnKTsiCiAgICAgICAgPgogICAgICAgICAgPGRpdiBjbGFzcz0icm93IG5vLWd1dHRlcnMganVzdGlmeS1jb250ZW50LWVuZCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy03Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0IHB5LTUgcGwtbWQtNCBwci1tZC0zIj4KICAgICAgICAgICAgICAgIDxoMiBjbGFzcz0ibWItNCI+V2UgbmVlZCB2b2x1bnRlZXJzLjwvaDI+CiAgICAgICAgICAgICAgICA8cCBzdHlsZT0iY29sb3I6IGJsYWNrOyI+CiAgICAgICAgICAgICAgICAgIEZhciBmYXIgYXdheSwgYmVoaW5kIHRoZSB3b3JkIG1vdW50YWlucywgZmFyIGZyb20gdGhlCiAgICAgICAgICAgICAgICAgIGNvdW50cmllcyBWb2thbGlhIGFuZCBDb25zb25hbnRpYSwgdGhlcmUgbGl2ZSB0aGUgYmxpbmQKICAgICAgICAgICAgICAgICAgdGV4dHMuIFNlcGFyYXRlZCB0aGV5IGxpdmUgaW4gQm9va21hcmtzZ3JvdmUgcmlnaHQgYXQgdGhlCiAgICAgICAgICAgICAgICAgIGNvYXN0IG9mIHRoZSBTZW1hbnRpY3MgVXBkYXR5ZSBvZiA1LzE5LzIwIDE6NDEgUE0KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgICAgIGhyZWY9Imh0dHBzOi8vZm9ybXMuZ2xlL3UzcVBMNlVlNEY0RHNzazhBIgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJidG4gYnRuLXByaW1hcnkgcHktMyBweC00IgogICAgICAgICAgICAgICAgICAgID5Kb2luIG5vdzwvYQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTUgZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBiZy1ibGFjayI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJhYm91dC10ZXh0IHB5LTUgcGwtbWQtNSI+CiAgICAgICAgICAgIDxoMj4KICAgICAgICAgICAgICA8c3Ryb25nIGNsYXNzPSJudW1iZXIiIGRhdGEtbnVtYmVyPSIxMjAiPjA8L3N0cm9uZz4gTWVtYmVycwogICAgICAgICAgICAgIGpvaW5lZCBhbmQgY291bnRpbmcuCiAgICAgICAgICAgIDwvaDI+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgIEZhciBmYXIgYXdheSwgYmVoaW5kIHRoZSB3b3JkIG1vdW50YWlucywgZmFyIGZyb20gdGhlIGNvdW50cmllcwogICAgICAgICAgICAgIFZva2FsaWEgYW5kIENvbnNvbmFudGlhLCB0aGVyZSBsaXZlIHRoZSBibGluZCB0ZXh0cy4gU2VwYXJhdGVkCiAgICAgICAgICAgICAgdGhleSBsaXZlIGluIEJvb2ttYXJrc2dyb3ZlIHJpZ2h0IGF0IHRoZSBjb2FzdCBvZiB0aGUgU2VtYW50aWNzCiAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biBidG4tYmxhY2sgcHktMyBweC00IgogICAgICAgICAgICAgICAgPkRLIHdoYXQgdGhpcyBidXR0b24gc2hvdWxkIGxpbmsgdG88L2EKICAgICAgICAgICAgICA+CiAgICAgICAgICAgIDwvcD4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KCiAgPHNlY3Rpb24gY2xhc3M9InNlcnZpY2VzLXNlY3Rpb24gcHktNSBweS1tZC0wIGJnLWxpZ2h0Ij4KICAgIDxkaXYgaWQ9Im1pc3Npb24iIGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJjb2wgaGVhZGluZy1zZWN0aW9uIHRleHQtY2VudGVyIGZ0Y28tYW5pbWF0ZSI+CiAgICAgICAgPGgyIGNsYXNzPSJtYi00Ij4KICAgICAgICAgIE1pc3Npb24KICAgICAgICA8L2gyPgogICAgICAgIDxwIHN0eWxlPSJjb2xvcjogYmxhY2s7Ij4KICAgICAgICAgIEZhciBmYXIgYXdheSwgYmVoaW5kIHRoZSB3b3JkIG1vdW50YWlucywgZmFyIGZyb20gdGhlIGNvdW50cmllcwogICAgICAgICAgVm9rYWxpYSBhbmQgQ29uc29uYW50aWEKICAgICAgICA8L3A+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJyb3cgbm8tZ3V0dGVycyBkLWZsZXgiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1sZy0zIGQtZmxleCBhbGlnbi1zZWxmLXN0cmV0Y2ggZnRjby1hbmltYXRlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGJsb2NrLTYgc2VydmljZXMgZC1ibG9jayI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPjxzcGFuIGNsYXNzPSJmbGF0aWNvbi1jaGFyaXR5Ij48L3NwYW4+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iaGVhZGluZyBtYi0zIj5IZWxwICZhbXA7IFN1cHBvcnQ8L2gzPgogICAgICAgICAgICAgIDxwIHN0eWxlPSJjb2xvcjogYmxhY2s7Ij4KICAgICAgICAgICAgICAgIDIwMyBGYWtlIFN0LiBNb3VudGFpbiBWaWV3LCBTYW4gRnJhbmNpc2NvLCBDYWxpZm9ybmlhLCBVU0EKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgY29sLWxnLTMgZC1mbGV4IGFsaWduLXNlbGYtc3RyZXRjaCBmdGNvLWFuaW1hdGUiPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgYmxvY2stNiBzZXJ2aWNlcyBkLWJsb2NrIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaWNvbiI+PHNwYW4gY2xhc3M9ImZsYXRpY29uLWFkb3B0aW9uIj48L3NwYW4+PC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWJvZHkiPgogICAgICAgICAgICAgIDxoMyBjbGFzcz0iaGVhZGluZyBtYi0zIj5BZG9wdGlvbjwvaDM+CiAgICAgICAgICAgICAgPHAgc3R5bGU9ImNvbG9yOiBibGFjazsiPgogICAgICAgICAgICAgICAgQSBzbWFsbCByaXZlciBuYW1lZCBEdWRlbiBmbG93cyBieSB0aGVpciBwbGFjZSBhbmQgc3VwcGxpZXMuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1sZy0zIGQtZmxleCBhbGlnbi1zZWxmLXN0cmV0Y2ggZnRjby1hbmltYXRlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGJsb2NrLTYgc2VydmljZXMgZC1ibG9jayI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPjxzcGFuIGNsYXNzPSJmbGF0aWNvbi12b2x1bnRlZXIiPjwvc3Bhbj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJoZWFkaW5nIG1iLTMiPlZvbHVudGVlcmluZzwvaDM+CiAgICAgICAgICAgICAgPHAgc3R5bGU9ImNvbG9yOiBibGFjazsiPgogICAgICAgICAgICAgICAgQSBzbWFsbCByaXZlciBuYW1lZCBEdWRlbiBmbG93cyBieSB0aGVpciBwbGFjZSBhbmQgc3VwcGxpZXMuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC02IGNvbC1sZy0zIGQtZmxleCBhbGlnbi1zZWxmLXN0cmV0Y2ggZnRjby1hbmltYXRlIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhIGJsb2NrLTYgc2VydmljZXMgZC1ibG9jayI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Imljb24iPjxzcGFuIGNsYXNzPSJmbGF0aWNvbi1vcGVuLWJvb2siPjwvc3Bhbj48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtYm9keSI+CiAgICAgICAgICAgICAgPGgzIGNsYXNzPSJoZWFkaW5nIG1iLTMiPkVkdWNhdGlvbjwvaDM+CiAgICAgICAgICAgICAgPHAgc3R5bGU9ImNvbG9yOiBibGFjazsiPgogICAgICAgICAgICAgICAgQSBzbWFsbCByaXZlciBuYW1lZCBEdWRlbiBmbG93cyBieSB0aGVpciBwbGFjZSBhbmQgc3VwcGxpZXMuCiAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KCiAgPHNlY3Rpb24gaWQ9InNuYXBzaG90IiBjbGFzcz0iZnRjby1zZWN0aW9uIGZ0Y28tY2F1c2VzIj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIHBiLTMiPgogICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0xMCBoZWFkaW5nLXNlY3Rpb24gdGV4dC1jZW50ZXIgZnRjby1hbmltYXRlIj4KICAgICAgICAgIDxoMiBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgIFNuYXBzaG90cwogICAgICAgICAgPC9oMj4KICAgICAgICAgIDxwPgogICAgICAgICAgICBRdW90ZXMgYW5kIHRob3VnaHRzIGZyb20gb3VyIGNvbW11bml0eSEKICAgICAgICAgIDwvcD4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLWNhdXNlcyBvd2wtY2Fyb3VzZWwiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzbmFwc2hvdDEiCiAgICAgICAgICAgICAgICBjbGFzcz0iY2F1c2VzIHRleHQtY2VudGVyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvY2F1c2VzLTEuanBnKTsiCiAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICA8aDI+UmFuZG9tIE1lbnRvcjwvaDI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc25hcHNob3QxIgogICAgICAgICAgICAgICAgY2xhc3M9ImNhdXNlcyB0ZXh0LWNlbnRlciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWciCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL2NhdXNlcy0yLmpwZyk7IgogICAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICAgICAgPGgyPlJhbmRvbSBNZW50ZWU8L2gyPgogICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgIDxhCiAgICAgICAgICAgICAgICBkYXRhLXRvZ2dsZT0ibW9kYWwiCiAgICAgICAgICAgICAgICBkYXRhLXRhcmdldD0iI3NuYXBzaG90MSIKICAgICAgICAgICAgICAgIGNsYXNzPSJjYXVzZXMgdGV4dC1jZW50ZXIiCiAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICBjbGFzcz0iaW1nIgogICAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9jYXVzZXMtMy5qcGcpOyIKICAgICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgICAgIDxoMj5SYW5kb20gVGVhY2hlcjwvaDI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGEKICAgICAgICAgICAgICAgIGRhdGEtdG9nZ2xlPSJtb2RhbCIKICAgICAgICAgICAgICAgIGRhdGEtdGFyZ2V0PSIjc25hcHNob3QxIgogICAgICAgICAgICAgICAgY2xhc3M9ImNhdXNlcyB0ZXh0LWNlbnRlciIKICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgIGNsYXNzPSJpbWciCiAgICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL2NhdXNlcy00LmpwZyk7IgogICAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICAgICAgPGgyPlRhbXUgR3V5PC9oMj4KICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8YQogICAgICAgICAgICAgICAgZGF0YS10b2dnbGU9Im1vZGFsIgogICAgICAgICAgICAgICAgZGF0YS10YXJnZXQ9IiNzbmFwc2hvdDEiCiAgICAgICAgICAgICAgICBjbGFzcz0iY2F1c2VzIHRleHQtY2VudGVyIgogICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgY2xhc3M9ImltZyIKICAgICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvY2F1c2VzLTUuanBnKTsiCiAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICA8aDI+Q29vbDwvaDI+CiAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KCiAgPGRpdgogICAgY2xhc3M9Im1vZGFsIGZhZGUiCiAgICBpZD0ic25hcHNob3QxIgogICAgdGFiaW5kZXg9Ii0xIgogICAgcm9sZT0iZGlhbG9nIgogICAgYXJpYS1sYWJlbGxlZGJ5PSJzbmFwc2hvdDEiCiAgICBhcmlhLWhpZGRlbj0idHJ1ZSIKICA+CiAgICA8ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciIHJvbGU9ImRvY3VtZW50Ij4KICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtY29udGVudCI+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtaGVhZGVyIj4KICAgICAgICAgIDxoNSBjbGFzcz0ibW9kYWwtdGl0bGUiIGlkPSJleGFtcGxlTW9kYWxMYWJlbCI+CiAgICAgICAgICAgIE5hbWUvIERlc2NyaXB0aW9uCiAgICAgICAgICA8L2g1PgogICAgICAgICAgPGJ1dHRvbgogICAgICAgICAgICB0eXBlPSJidXR0b24iCiAgICAgICAgICAgIGNsYXNzPSJjbG9zZSIKICAgICAgICAgICAgZGF0YS1kaXNtaXNzPSJtb2RhbCIKICAgICAgICAgICAgYXJpYS1sYWJlbD0iQ2xvc2UiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPSJ0cnVlIj4mdGltZXM7PC9zcGFuPgogICAgICAgICAgPC9idXR0b24+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtYm9keSI+CiAgICAgICAgICBTb21lIHRleHQgYWJvdXQgdGhlIHF1b3RlIGFuZCBhIGxvdCBvZiBjdXRlIGZ1biB0aGluZ3MgeWF5CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0ibW9kYWwtZm9vdGVyIj4KICAgICAgICAgIDxidXR0b24gdHlwZT0iYnV0dG9uIiBjbGFzcz0iYnRuIGJ0bi1wcmltYXJ5IiBkYXRhLWRpc21pc3M9Im1vZGFsIj4KICAgICAgICAgICAgQ2xvc2UKICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8c2VjdGlvbiBjbGFzcz0idGVzdGltb255LXNlY3Rpb24iPgogICAgPGRpdiBpZD0idGVhbSIgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBmdGNvLWFuaW1hdGUganVzdGlmeS1jb250ZW50LWNlbnRlciI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTYgZC1mbGV4IiBzdHlsZT0icGFkZGluZy1ib3R0b206IDBweDsiPgogICAgICAgICAgPGRpdgogICAgICAgICAgICBjbGFzcz0idGVzdGltb255LWltZyIKICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvdGVzdGltb255LWltZy5wbmcpOyIKICAgICAgICAgID48L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNiBweS01Ij4KICAgICAgICAgIDxkaXYKICAgICAgICAgICAgY2xhc3M9ImhlYWRpbmctc2VjdGlvbiBoZWFkaW5nLXNlY3Rpb24td2hpdGUgcHQtNCBmdGNvLWFuaW1hdGUiCiAgICAgICAgICA+CiAgICAgICAgICAgIDxoMiBjbGFzcz0ibWItMCI+VGVhbTwvaDI+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcm91c2VsLXRlc3RpbW9ueSBvd2wtY2Fyb3VzZWwgZnRjby1vd2wiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbnktd3JhcCBwYi00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgQmx1cmIKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVzZXItaW1nIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvcHJvZmlsZV9waWNzL0pvbmF0aGFuX1Rob21hcy5wbmcpOwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3MgbWwtMyI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUiPkpvbmF0aGFuIFRob21hczwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb24iPlByZXNpZGVudDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9ueS13cmFwIHBiLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi00Ij4KICAgICAgICAgICAgICAgICAgICBCbHVyYgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idXNlci1pbWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9wcm9maWxlX3BpY3MvQmxlc3NpbmFfQmFidS5wbmcpOwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3MgbWwtMyI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUiPkJsZXNzaW5hIEJhYnU8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBvc2l0aW9uIj5WaWNlIFByZXNpZGVudDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9ueS13cmFwIHBiLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi00Ij4KICAgICAgICAgICAgICAgICAgICBCbHVyYgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idXNlci1pbWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9IgogICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9wcm9maWxlX3BpY3MvTWFkZWxpbmVfR3JpY2UucG5nKTsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zIG1sLTMiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIj5NYWRlbGluZSBHcmljZTwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb24iCiAgICAgICAgICAgICAgICAgICAgICA+UGFybGlhbWVudGFyaWFuICYgRGF0YSBBbmFseXRpY3MgTWFuYWdlcjwvc3BhbgogICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9ueS13cmFwIHBiLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dCI+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJtYi00Ij4KICAgICAgICAgICAgICAgICAgICBCbHVyYgogICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImQtZmxleCI+CiAgICAgICAgICAgICAgICAgIDxkaXYKICAgICAgICAgICAgICAgICAgICBjbGFzcz0idXNlci1pbWciCiAgICAgICAgICAgICAgICAgICAgc3R5bGU9ImJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvcGVyc29uXzEuanBnKTsiCiAgICAgICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zIG1sLTMiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIj5TYW1pcmEgSXNsYW0tTWluYTwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb24iPkRpcmVjdG9yIG9mIENvbW11bmljYXRpb25zPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVzdGltb255LXdyYXAgcGItNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICAgICAgICAgIEJsdXJiCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyLWltZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3Byb2ZpbGVfcGljcy9BYWthc2hfS290aGFyaS5wbmcpOwogICAgICAgICAgICAgICAgICAgICIKICAgICAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3MgbWwtMyI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUiPkFha2FzaCBLb3RoYXJpPC9wPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwb3NpdGlvbiI+RGlyZWN0b3Igb2YgT3V0cmVhY2g8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbnktd3JhcCBwYi00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgQmx1cmIKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVzZXItaW1nIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3BlcnNvbl8xLmpwZyk7IgogICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcyBtbC0zIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSI+QXV2YSBTYWdoYWZpPC9wPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwb3NpdGlvbiI+RGlyZWN0b3Igb2YgU29jaWFsIE1lZGlhPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVzdGltb255LXdyYXAgcGItNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICAgICAgICAgIEJsdXJiCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyLWltZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3Byb2ZpbGVfcGljcy9Kb25hdGhhbl9TYW11ZWwucG5nKTsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zIG1sLTMiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIj5Kb25hdGhhbiBTYW11ZWw8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBvc2l0aW9uIj5UZWNobmljYWwgRGlyZWN0b3I8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbnktd3JhcCBwYi00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgQmx1cmIKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVzZXItaW1nIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvcHJvZmlsZV9waWNzL0hpbGxlbmFfTXVsYXQucG5nKTsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zIG1sLTMiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIj5FZHVjYXRpb24gTWFuYWdlcjwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb24iPkhpbGxlbmEgTXVsYXQ8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbnktd3JhcCBwYi00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgQmx1cmIKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVzZXItaW1nIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3BlcnNvbl8xLmpwZyk7IgogICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcyBtbC0zIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSI+RW1pbHkgQ3VydGlzPC9wPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwb3NpdGlvbiI+Q3VycmljdWx1bSBNYW5hZ2VyPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVzdGltb255LXdyYXAgcGItNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICAgICAgICAgIEJsdXJiCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyLWltZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3Byb2ZpbGVfcGljcy9LYWx5bm5fQnJpbGVzLU1vb3JlLnBuZyk7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcyBtbC0zIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSI+S2FseW5uIEJyaWxlcy1Nb29yZTwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb24iPkZ1bmRyYWlzaW5nIE1hbmFnZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbnktd3JhcCBwYi00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgQmx1cmIKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVzZXItaW1nIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSJiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3BlcnNvbl8xLmpwZyk7IgogICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcyBtbC0zIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSI+TWVyZWRpdGggVGFib3I8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBvc2l0aW9uIj5BcnQgUHJvZHVjdGlvbiBNYW5hZ2VyPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVzdGltb255LXdyYXAgcGItNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICAgICAgICAgIEJsdXJiCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyLWltZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iCiAgICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoaW1hZ2VzL3Byb2ZpbGVfcGljcy9MeWRpYV9WaWRhbGVzLnBuZyk7CiAgICAgICAgICAgICAgICAgICAgIgogICAgICAgICAgICAgICAgICA+PC9kaXY+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBvcyBtbC0zIj4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSI+THlkaWEgVmlkYWxlczwvcD4KICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icG9zaXRpb24iPkNvbW11bml0eSBFbmdhZ2VtZW50IE1hbmFnZXI8L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbnktd3JhcCBwYi00Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgQmx1cmIKICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJkLWZsZXgiPgogICAgICAgICAgICAgICAgICA8ZGl2CiAgICAgICAgICAgICAgICAgICAgY2xhc3M9InVzZXItaW1nIgogICAgICAgICAgICAgICAgICAgIHN0eWxlPSIKICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChpbWFnZXMvcHJvZmlsZV9waWNzL0FuZ2VsX1RoYWkucG5nKTsKICAgICAgICAgICAgICAgICAgICAiCiAgICAgICAgICAgICAgICAgID48L2Rpdj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icG9zIG1sLTMiPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIj5BbmdlbCBUaGFpPC9wPgogICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwb3NpdGlvbiI+UGhvdG9ncmFwaGVyPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVzdGltb255LXdyYXAgcGItNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0Ij4KICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICAgICAgICAgIEJsdXJiCiAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZC1mbGV4Ij4KICAgICAgICAgICAgICAgICAgPGRpdgogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJ1c2VyLWltZyIKICAgICAgICAgICAgICAgICAgICBzdHlsZT0iYmFja2dyb3VuZC1pbWFnZTogdXJsKGltYWdlcy9wZXJzb25fMS5qcGcpOyIKICAgICAgICAgICAgICAgICAgPjwvZGl2PgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwb3MgbWwtMyI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9Im5hbWUiPkFydmluZCBCYWxhamk8L3A+CiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBvc2l0aW9uIj5UZWNobmljYWwgRGV2ZWxvcGVyPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvc2VjdGlvbj4KCiAgPGZvb3RlciBpZD0iZm9vdGVyQ29udGFjdCIgY2xhc3M9ImZ0Y28tZm9vdGVyIGZ0Y28tc2VjdGlvbiI+CiAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8ZGl2IGNsYXNzPSJyb3cgbWItNSI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZ0Y28tZm9vdGVyLXdpZGdldCBtYi00Ij4KICAgICAgICAgICAgPGgyIGNsYXNzPSJmdGNvLWhlYWRpbmctMiI+Q09PTDwvaDI+CiAgICAgICAgICAgIDxwPgogICAgICAgICAgICAgIEZhciBmYXIgYXdheSwgYmVoaW5kIHRoZSB3b3JkIG1vdW50YWlucywgZmFyIGZyb20gdGhlIGNvdW50cmllcwogICAgICAgICAgICAgIFZva2FsaWEgYW5kIENvbnNvbmFudGlhLCB0aGVyZSBsaXZlIHRoZSBibGluZCB0ZXh0cy4KICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8dWwKICAgICAgICAgICAgICBjbGFzcz0iZnRjby1mb290ZXItc29jaWFsIGxpc3QtdW5zdHlsZWQgZmxvYXQtbWQtbGVmdCBmbG9hdC1sZnQgbXQtNSIKICAgICAgICAgICAgPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0iZnRjby1hbmltYXRlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGNsYXNzPSJpY29uLXR3aXR0ZXIiPjwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICA8bGkgY2xhc3M9ImZ0Y28tYW5pbWF0ZSI+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj48c3BhbiBjbGFzcz0iaWNvbi1mYWNlYm9vayI+PC9zcGFuPjwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgIDxsaSBjbGFzcz0iZnRjby1hbmltYXRlIj4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiPjxzcGFuIGNsYXNzPSJpY29uLWluc3RhZ3JhbSI+PC9zcGFuPjwvYT4KICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8L3VsPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImZ0Y28tZm9vdGVyLXdpZGdldCBtYi00Ij4KICAgICAgICAgICAgPGgyIGNsYXNzPSJmdGNvLWhlYWRpbmctMiI+SGF2ZSBhIFF1ZXN0aW9ucz88L2gyPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJibG9jay0yMyBtYi0zIj4KICAgICAgICAgICAgICA8dWw+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJpY29uIGljb24tbWFwLW1hcmtlciI+PC9zcGFuCiAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0idGV4dCIKICAgICAgICAgICAgICAgICAgICA+MjAzIEZha2UgU3QuIE1vdW50YWluIFZpZXcsIFNhbiBGcmFuY2lzY28sIENhbGlmb3JuaWEsCiAgICAgICAgICAgICAgICAgICAgVVNBPC9zcGFuCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiMiCiAgICAgICAgICAgICAgICAgICAgPjxzcGFuIGNsYXNzPSJpY29uIGljb24tcGhvbmUiPjwvc3BhbgogICAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0idGV4dCI+KzIgMzkyIDM5MjkgMjEwPC9zcGFuPjwvYQogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIgogICAgICAgICAgICAgICAgICAgID48c3BhbiBjbGFzcz0iaWNvbiBpY29uLWVudmVsb3BlIj48L3NwYW4KICAgICAgICAgICAgICAgICAgICA+PHNwYW4gY2xhc3M9InRleHQiPmluZm9AeW91cmRvbWFpbi5jb208L3NwYW4+PC9hCiAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTEyIHRleHQtY2VudGVyIj4KICAgICAgICAgIDxwIGNsYXNzPSJkLW5vbmUiPgogICAgICAgICAgICA8IS0tIExpbmsgYmFjayB0byBDb2xvcmxpYiBjYW4ndCBiZSByZW1vdmVkLiBUZW1wbGF0ZSBpcyBsaWNlbnNlZCB1bmRlciBDQyBCWSAzLjAuIC0tPgogICAgICAgICAgICBDb3B5cmlnaHQgJmNvcHk7MjAyMCBBbGwgcmlnaHRzIHJlc2VydmVkIHwgVGhpcyB0ZW1wbGF0ZSBpcyBtYWRlCiAgICAgICAgICAgIHdpdGggPGkgY2xhc3M9Imljb24taGVhcnQgY29sb3ItZGFuZ2VyIiBhcmlhLWhpZGRlbj0idHJ1ZSI+PC9pPiBieQogICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2NvbG9ybGliLmNvbSIgdGFyZ2V0PSJfYmxhbmsiPkNvbG9ybGliPC9hPgogICAgICAgICAgICA8IS0tIExpbmsgYmFjayB0byBDb2xvcmxpYiBjYW4ndCBiZSByZW1vdmVkLiBUZW1wbGF0ZSBpcyBsaWNlbnNlZCB1bmRlciBDQyBCWSAzLjAuIC0tPgogICAgICAgICAgPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZm9vdGVyPgoKICA8ZGl2IGlkPSJmdGNvLWxvYWRlciIgY2xhc3M9InNob3cgZnVsbHNjcmVlbiI+CiAgICA8c3ZnIGNsYXNzPSJjaXJjdWxhciIgd2lkdGg9IjQ4cHgiIGhlaWdodD0iNDhweCI+CiAgICAgIDxjaXJjbGUKICAgICAgICBjbGFzcz0icGF0aC1iZyIKICAgICAgICBjeD0iMjQiCiAgICAgICAgY3k9IjI0IgogICAgICAgIHI9IjIyIgogICAgICAgIGZpbGw9Im5vbmUiCiAgICAgICAgc3Ryb2tlLXdpZHRoPSI0IgogICAgICAgIHN0cm9rZT0iI2VlZWVlZSIKICAgICAgLz4KICAgICAgPGNpcmNsZQogICAgICAgIGNsYXNzPSJwYXRoIgogICAgICAgIGN4PSIyNCIKICAgICAgICBjeT0iMjQiCiAgICAgICAgcj0iMjIiCiAgICAgICAgZmlsbD0ibm9uZSIKICAgICAgICBzdHJva2Utd2lkdGg9IjQiCiAgICAgICAgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIgogICAgICAgIHN0cm9rZT0iIzIwQTI5QSIKICAgICAgLz4KICAgIDwvc3ZnPgogIDwvZGl2Pgo8L2Rpdj4K"},null]}