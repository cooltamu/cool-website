{"remainingRequest":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\src\\components\\CoolLanding.vue?vue&type=template&id=9058d9d2&","dependencies":[{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\src\\components\\CoolLanding.vue","mtime":1589736691331},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\joneb\\Documents\\GitHub\\cool-website\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}